<?xml version='1.0' encoding='utf-8'?>
<?grc format='1' created='3.7.13'?>
<flow_graph>
  <timestamp>Thu May 14 10:45:27 2020</timestamp>
  <block>
    <key>options</key>
    <param>
      <key>author</key>
      <value></value>
    </param>
    <param>
      <key>window_size</key>
      <value></value>
    </param>
    <param>
      <key>category</key>
      <value>[GRC Hier Blocks]</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>description</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(8, 8)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>generate_options</key>
      <value>qt_gui</value>
    </param>
    <param>
      <key>hier_block_src_path</key>
      <value>.:</value>
    </param>
    <param>
      <key>id</key>
      <value>top_block</value>
    </param>
    <param>
      <key>max_nouts</key>
      <value>0</value>
    </param>
    <param>
      <key>qt_qss_theme</key>
      <value>C:\Users\zaurus\Documents\fx2_adcsa_sdr_jjy.qss</value>
    </param>
    <param>
      <key>realtime_scheduling</key>
      <value></value>
    </param>
    <param>
      <key>run_command</key>
      <value>{python} -u {filename}</value>
    </param>
    <param>
      <key>run_options</key>
      <value>prompt</value>
    </param>
    <param>
      <key>run</key>
      <value>True</value>
    </param>
    <param>
      <key>sizing_mode</key>
      <value>fixed</value>
    </param>
    <param>
      <key>thread_safe_setters</key>
      <value></value>
    </param>
    <param>
      <key>title</key>
      <value></value>
    </param>
    <param>
      <key>placement</key>
      <value>(0,0)</value>
    </param>
  </block>
  <block>
    <key>variable_qtgui_range</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>12</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(256, 12)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>cic_gain</value>
    </param>
    <param>
      <key>label</key>
      <value>CIC GAIN</value>
    </param>
    <param>
      <key>min_len</key>
      <value>200</value>
    </param>
    <param>
      <key>orient</key>
      <value>Qt.Horizontal</value>
    </param>
    <param>
      <key>start</key>
      <value>0</value>
    </param>
    <param>
      <key>step</key>
      <value>1</value>
    </param>
    <param>
      <key>stop</key>
      <value>16</value>
    </param>
    <param>
      <key>rangeType</key>
      <value>int</value>
    </param>
    <param>
      <key>widget</key>
      <value>counter_slider</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(184, 12)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>cic_rate</value>
    </param>
    <param>
      <key>value</key>
      <value>0</value>
    </param>
  </block>
  <block>
    <key>variable</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(8, 84)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>value</key>
      <value>37500 &lt;&lt; cic_rate</value>
    </param>
  </block>
  <block>
    <key>variable_function_probe</key>
    <param>
      <key>block_id</key>
      <value>epy_block_1</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>function_args</key>
      <value></value>
    </param>
    <param>
      <key>function_name</key>
      <value>get_time</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(488, 12)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>variable_function_probe_0</value>
    </param>
    <param>
      <key>value</key>
      <value>''</value>
    </param>
    <param>
      <key>poll_rate</key>
      <value>10</value>
    </param>
  </block>
  <block>
    <key>variable_fx2_gui_label</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>variable_function_probe_0</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>formatter</key>
      <value>'{0}'.format</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(784, 12)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>variable_fx2_gui_label_0</value>
    </param>
    <param>
      <key>label</key>
      <value>TIME</value>
    </param>
    <param>
      <key>type</key>
      <value>raw</value>
    </param>
  </block>
  <block>
    <key>variable_qtgui_label</key>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>value</key>
      <value>variable_function_probe_0</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>formatter</key>
      <value>'{0}'.format</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(648, 12)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>variable_qtgui_label_0</value>
    </param>
    <param>
      <key>label</key>
      <value>TIME</value>
    </param>
    <param>
      <key>type</key>
      <value>raw</value>
    </param>
  </block>
  <block>
    <key>analog_sig_source_x</key>
    <param>
      <key>amp</key>
      <value>1</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>freq</key>
      <value>-10e3</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(24, 244)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>analog_sig_source_x_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>offset</key>
      <value>0</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>samp_rate</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>waveform</key>
      <value>analog.GR_COS_WAVE</value>
    </param>
  </block>
  <block>
    <key>blocks_complex_to_mag</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(464, 264)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_complex_to_mag_0</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>blocks_moving_average_xx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(304, 244)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_moving_average_xx_0</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
    <param>
      <key>length</key>
      <value>samp_rate / 5</value>
    </param>
    <param>
      <key>max_iter</key>
      <value>4000</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>scale</key>
      <value>1</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
  </block>
  <block>
    <key>blocks_multiply_xx</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>1</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(192, 248)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>blocks_multiply_xx_0</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>num_inputs</key>
      <value>2</value>
    </param>
    <param>
      <key>vlen</key>
      <value>1</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>address</key>
      <value>'127.0.0.1'</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('ADC_SA_SDR', 'blk', [('address', "'127.0.0.1'"), ('port', '53006'), ('led', '0'), ('frequency', '1000.0'), ('cic_rate', '3'), ('cic_gain', '8')], [], [], 'Embedded Python Block example - ADC_SA_SDR', ['cic_gain', 'cic_rate', 'frequency', 'led'])</value>
    </param>
    <param>
      <key>cic_gain</key>
      <value>cic_gain</value>
    </param>
    <param>
      <key>cic_rate</key>
      <value>cic_rate</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>import numpy as np
from gnuradio import gr
import socket

class blk(gr.basic_block):
    """Embedded Python Block example - ADC_SA_SDR"""

    def __init__(self, address='127.0.0.1', port=53006, led=0, frequency=1e3, cic_rate=3, cic_gain=8):
        gr.basic_block.__init__(
            self,
            name='ADC_SA_SDR',
            in_sig=None,
            out_sig=None
        )
        self._address = address
        self._port = port
        self._led = led
        self._frequency = frequency
        self._cic_rate = cic_rate
        self._cic_gain = cic_gain

        try:
            self._connect()
            self._send_led()
            self._send_frequency()
            self._send_cic_rate()
            self._send_cic_gain()
        except:
            pass

    def _connect(self):
        print('connecting to %s:%d' % (self._address, self._port))
        self._client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self._client.connect((self._address, self._port))
        self._stream = self._client.makefile()

    def _send_led(self):
        try:
            self._stream.write('*W32:0x%x 0x%x\n' % (0x0, int(self._led)))
            self._stream.flush()
        except:
            self._connect()
            self._stream.write('*W32:0x%x 0x%x\n' % (0x0, int(self._led)))
            self._stream.flush()

    def _freq_to_ddc(self, clk, freq):
        clkDiv2 = clk / 2.0
        bank = np.floor(freq / clkDiv2)
        lo = freq - clkDiv2 * bank
        if (bank % 2) == 1:
            lo = clkDiv2 - lo
        return lo

    def _freq_to_phase_inc(self, clk, freq):
        phaseInc360 = 0x80000000 * 2.0
        return int(phaseInc360 * (self._freq_to_ddc(clk, freq) / clk))

    def _send_frequency(self):
        clk = 48000000
        phaseInc = self._freq_to_phase_inc(clk, self._frequency)
        clkDiv2 = clk / 2.0
        bank = np.floor(self._frequency / clkDiv2)
        iq_swap = int(bank % 2)
        try:
            self._stream.write('*W32:0x%x 0x%x\n' % (0x10, phaseInc))
            self._stream.write('*W32:0x%x %d\n' % (0x20, iq_swap))
            self._stream.flush()
        except:
            self._connect()
            self._stream.write('*W32:0x%x 0x%x\n' % (0x10, phaseInc))
            self._stream.write('*W32:0x%x %d\n' % (0x20, iq_swap))
            self._stream.flush()

    def _send_cic_rate(self):
        try:
            self._stream.write('*W32:0x%x %d\n' % (0x30, int(self._cic_rate)))
            self._stream.flush()
        except:
            self._connect()
            self._stream.write('*W32:0x%x %d\n' % (0x30, int(self._cic_rate)))
            self._stream.flush()

    def _send_cic_gain(self):
        try:
            self._stream.write('*W32:0x%x %d\n' % (0x40, int(self._cic_gain)))
            self._stream.flush()
        except:
            self._connect()
            self._stream.write('*W32:0x%x %d\n' % (0x40, int(self._cic_gain)))
            self._stream.flush()

    @property
    def led(self):
        return self._led

    @led.setter
    def led(self, led):
        self._led = led
        self._send_led()

    @property
    def frequency(self):
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        self._frequency = frequency
        self._send_frequency()

    @property
    def cic_rate(self):
        return self._cic_rate

    @cic_rate.setter
    def cic_rate(self, cic_rate):
        self._cic_rate = cic_rate
        self._send_cic_rate()

    @property
    def cic_gain(self):
        return self._cic_gain

    @cic_gain.setter
    def cic_gain(self, cic_gain):
        self._cic_gain = cic_gain
        self._send_cic_gain()
</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>frequency</key>
      <value>30e3</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(360, 12)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>epy_block_0</value>
    </param>
    <param>
      <key>led</key>
      <value>0</value>
    </param>
    <param>
      <key>port</key>
      <value>53006</value>
    </param>
  </block>
  <block>
    <key>epy_block</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>_io_cache</key>
      <value>('JJY Decoder', 'blk', [('sample_rate', '37500')], [('0', 'float', 1)], [], 'Embedded Python Block example - JJY Decoder', ['sample_rate'])</value>
    </param>
    <param>
      <key>_source_code</key>
      <value>import numpy as np
from gnuradio import gr
import sys

class blk(gr.sync_block):
    """Embedded Python Block example - JJY Decoder"""

    def __init__(self, sample_rate=37500):
        gr.sync_block.__init__(
            self,
            name='JJY Decoder',
            in_sig=[np.float32],
            out_sig=None
        )
        self.sample_rate = int(sample_rate)

        self._level_count = 0
        self._min = sys.float_info.max
        self._max = sys.float_info.min
        self._minimum = None
        self._threshold = None
        self._maximum = None

        self._count = 0
        self._last_value = None
        self._last_rise = None
        self._rise_count = None
        self._next_rise_count = None

        self._sum = 0
        self._bits = []
        self._minute_count = None
        self._next_minute = '--:--'
        self._minute = '--:--'

    def _convert_to_minute(self):
        if len(self._bits) &lt; 19 or self._bits[0] != 'M' or self._bits.count('X') &gt; 0:
            return self._minute, '--:--'
        m = 0
        if self._bits[1] == '1': m += 40
        if self._bits[2] == '1': m += 20
        if self._bits[3] == '1': m += 10
        if self._bits[5] == '1': m += 8
        if self._bits[6] == '1': m += 4
        if self._bits[7] == '1': m += 2
        if self._bits[8] == '1': m += 1
        h = 0
        if self._bits[12] == '1': h += 20
        if self._bits[13] == '1': h += 10
        if self._bits[15] == '1': h += 8
        if self._bits[16] == '1': h += 4
        if self._bits[17] == '1': h += 2
        if self._bits[18] == '1': h += 1
        if m &gt; 60 or h &gt; 23:
            return '--:--', '--:--'
        # next minute
        if m &lt; 59:
            m1 = m + 1
            h1 = h
        else:
            m1 = 0
            if h &lt; 23:
                h1 = h + 1
            else:
                h1 = 0
        return '%02d:%02d' % (h, m), '%02d:%02d' % (h1, m1)

    def _get_second(self):
        if self._minute_count == None:
            return -1
        else:
            return int(round(float(self._count - self._minute_count) / self.sample_rate))

    def get_time(self):
        if self._minute == '--:--':
            return '--:--:--'
        second = '--'
        if self._minute_count != None:
            sec = self._get_second()
            if sec &gt;= 60:
                self._minute = self._next_minute
                sec -= 60
            second = '%02d' % sec
        return '%s:%s' % (self._minute, second)

    def work(self, input_items, output_items):

        #
        # Update self._minimum, self._threshold and self._maximum every 4 seconds
        #
        self._min = min(self._min, np.min(input_items[0]))
        self._max = max(self._max, np.max(input_items[0]))
        self._level_count += len(input_items[0])
        if self._level_count &gt;= self.sample_rate * 4:
            self._minimum = self._min
            self._threshold = (self._min + self._max) / 2
            self._maximum = self._max
            #print self._minimum, self._threshold, self._maximum
            self._level_count = 0
            self._min = sys.float_info.max
            self._max = sys.float_info.min
        if self._threshold == None:
            return len(input_items[0])

        #
        # Find the rising position at 1 second intervals
        #
        if self._threshold != None:
            if self._last_value == None:
                self._last_value = 1 if input_items[0][0] &gt; self._threshold else 0

            p = 0
            while p &lt; len(input_items[0]):
                if self._last_value == 0:
                    result = np.where(input_items[0][p:] &gt; self._threshold * 1.1)
                    if len(result[0]) == 0:
                        break
                    p += result[0][0]
                    rise = self._count + p
                    if self._last_rise != None:
                        period = float(rise - self._last_rise) / self.sample_rate
                        #print period
                        if 0.9 &lt;= period and period &lt;= 1.1:
                            if self._rise_count == None:
                                self._rise_count = rise
                            else:
                                if rise &lt; self._rise_count + self.sample_rate / 2:
                                    self._rise_count = rise
                                    #print '&gt;',
                                else:
                                    self._rise_count = rise - self.sample_rate
                                    #print '&lt;',
                    self._last_rise = rise
                    self._last_value = 1
                else:
                    result = np.where(input_items[0][p:] &lt; self._threshold * 0.9)
                    if len(result[0]) == 0:
                        break
                    p += result[0][0]
                    self._last_value = 0

        #
        # Distinguish the code from the total of the levels for 1 second
        #
        if self._rise_count != None:
            p1 = self._rise_count - self._count
            p2 = self._rise_count + self.sample_rate - self._count
            if 0 &lt;= p1 and p2 &lt; len(input_items[0]):
                self._sum += np.sum(input_items[0][p1:p2])
            elif p2 &gt;= len(input_items[0]):
                self._sum += np.sum(input_items[0][p1:])
            else:
                self._sum += np.sum(input_items[0][:p2])

            if 0 &lt;= p2 and p2 &lt; len(input_items[0]):
                bit = '-'
                if (self._minute[-2:] in ('15', '45')) and 40 &lt;= len(self._bits) and len(self._bits) &lt;= 55:
                    pass
                else:
                    average = self._sum / self.sample_rate
                    ratio = (average - self._minimum) / (self._maximum - self._minimum)
                    bit = 'P'
                    if ratio &gt; 0.6: bit = '0'
                    elif ratio &gt; 0.35: bit = '1'
                if len(self._bits) &gt; 0 and self._bits[-1] == 'P' and bit == 'P':
                    if len(self._bits) != 60:
                        self._minute, self._next_minute = '--:--', '--:--'
                    self._minute_count = self._rise_count
                    self._bits = []
                    bit = 'M'
                if bit == 'M':
                    print
                print bit,
                self._bits.append(bit)
                if len(self._bits) == 19:
                    self._minute, self._next_minute = self._convert_to_minute()
                    if self._minute != '--:--':
                        print '(%s)' % self._minute,

                self._rise_count = self._count + p2
                self._sum = 0


        self._count += len(input_items[0])

        return len(input_items[0])
</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(632, 260)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>epy_block_1</value>
    </param>
    <param>
      <key>sample_rate</key>
      <value>samp_rate</value>
    </param>
  </block>
  <block>
    <key>fx2_iq_udp_source</key>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(8, 164)</value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>id</key>
      <value>fx2_iq_udp_source_0</value>
    </param>
    <param>
      <key>ipaddr</key>
      <value>'0.0.0.0'</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>port</key>
      <value>52006</value>
    </param>
  </block>
  <block>
    <key>qtgui_freq_sink_x</key>
    <param>
      <key>autoscale</key>
      <value>False</value>
    </param>
    <param>
      <key>average</key>
      <value>1.0</value>
    </param>
    <param>
      <key>axislabels</key>
      <value>True</value>
    </param>
    <param>
      <key>bw</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>fc</key>
      <value>0</value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>ctrlpanel</key>
      <value>False</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>fftsize</key>
      <value>1024</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(184, 156)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>grid</key>
      <value>False</value>
    </param>
    <param>
      <key>id</key>
      <value>qtgui_freq_sink_x_0</value>
    </param>
    <param>
      <key>legend</key>
      <value>True</value>
    </param>
    <param>
      <key>alpha1</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color1</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label1</key>
      <value></value>
    </param>
    <param>
      <key>width1</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha10</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color10</key>
      <value>"dark blue"</value>
    </param>
    <param>
      <key>label10</key>
      <value></value>
    </param>
    <param>
      <key>width10</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha2</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color2</key>
      <value>"red"</value>
    </param>
    <param>
      <key>label2</key>
      <value></value>
    </param>
    <param>
      <key>width2</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha3</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color3</key>
      <value>"green"</value>
    </param>
    <param>
      <key>label3</key>
      <value></value>
    </param>
    <param>
      <key>width3</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha4</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color4</key>
      <value>"black"</value>
    </param>
    <param>
      <key>label4</key>
      <value></value>
    </param>
    <param>
      <key>width4</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha5</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color5</key>
      <value>"cyan"</value>
    </param>
    <param>
      <key>label5</key>
      <value></value>
    </param>
    <param>
      <key>width5</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha6</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color6</key>
      <value>"magenta"</value>
    </param>
    <param>
      <key>label6</key>
      <value></value>
    </param>
    <param>
      <key>width6</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha7</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color7</key>
      <value>"yellow"</value>
    </param>
    <param>
      <key>label7</key>
      <value></value>
    </param>
    <param>
      <key>width7</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha8</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color8</key>
      <value>"dark red"</value>
    </param>
    <param>
      <key>label8</key>
      <value></value>
    </param>
    <param>
      <key>width8</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha9</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color9</key>
      <value>"dark green"</value>
    </param>
    <param>
      <key>label9</key>
      <value></value>
    </param>
    <param>
      <key>width9</key>
      <value>1</value>
    </param>
    <param>
      <key>maxoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>minoutbuf</key>
      <value>0</value>
    </param>
    <param>
      <key>name</key>
      <value>""</value>
    </param>
    <param>
      <key>nconnections</key>
      <value>1</value>
    </param>
    <param>
      <key>showports</key>
      <value>True</value>
    </param>
    <param>
      <key>freqhalf</key>
      <value>True</value>
    </param>
    <param>
      <key>tr_chan</key>
      <value>0</value>
    </param>
    <param>
      <key>tr_level</key>
      <value>0.0</value>
    </param>
    <param>
      <key>tr_mode</key>
      <value>qtgui.TRIG_MODE_FREE</value>
    </param>
    <param>
      <key>tr_tag</key>
      <value>""</value>
    </param>
    <param>
      <key>type</key>
      <value>complex</value>
    </param>
    <param>
      <key>update_time</key>
      <value>0.10</value>
    </param>
    <param>
      <key>wintype</key>
      <value>firdes.WIN_BLACKMAN_hARRIS</value>
    </param>
    <param>
      <key>label</key>
      <value>Relative Gain</value>
    </param>
    <param>
      <key>ymax</key>
      <value>10</value>
    </param>
    <param>
      <key>ymin</key>
      <value>-140</value>
    </param>
    <param>
      <key>units</key>
      <value>dB</value>
    </param>
  </block>
  <block>
    <key>qtgui_time_sink_x</key>
    <param>
      <key>autoscale</key>
      <value>True</value>
    </param>
    <param>
      <key>axislabels</key>
      <value>True</value>
    </param>
    <param>
      <key>alias</key>
      <value></value>
    </param>
    <param>
      <key>comment</key>
      <value></value>
    </param>
    <param>
      <key>ctrlpanel</key>
      <value>False</value>
    </param>
    <param>
      <key>affinity</key>
      <value></value>
    </param>
    <param>
      <key>entags</key>
      <value>True</value>
    </param>
    <param>
      <key>_enabled</key>
      <value>True</value>
    </param>
    <param>
      <key>_coordinate</key>
      <value>(632, 156)</value>
    </param>
    <param>
      <key>gui_hint</key>
      <value></value>
    </param>
    <param>
      <key>_rotation</key>
      <value>0</value>
    </param>
    <param>
      <key>grid</key>
      <value>False</value>
    </param>
    <param>
      <key>id</key>
      <value>qtgui_time_sink_x_0</value>
    </param>
    <param>
      <key>legend</key>
      <value>True</value>
    </param>
    <param>
      <key>alpha1</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color1</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label1</key>
      <value></value>
    </param>
    <param>
      <key>marker1</key>
      <value>-1</value>
    </param>
    <param>
      <key>style1</key>
      <value>1</value>
    </param>
    <param>
      <key>width1</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha10</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color10</key>
      <value>"blue"</value>
    </param>
    <param>
      <key>label10</key>
      <value></value>
    </param>
    <param>
      <key>marker10</key>
      <value>-1</value>
    </param>
    <param>
      <key>style10</key>
      <value>1</value>
    </param>
    <param>
      <key>width10</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha2</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color2</key>
      <value>"red"</value>
    </param>
    <param>
      <key>label2</key>
      <value></value>
    </param>
    <param>
      <key>marker2</key>
      <value>-1</value>
    </param>
    <param>
      <key>style2</key>
      <value>1</value>
    </param>
    <param>
      <key>width2</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha3</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color3</key>
      <value>"green"</value>
    </param>
    <param>
      <key>label3</key>
      <value></value>
    </param>
    <param>
      <key>marker3</key>
      <value>-1</value>
    </param>
    <param>
      <key>style3</key>
      <value>1</value>
    </param>
    <param>
      <key>width3</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha4</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color4</key>
      <value>"black"</value>
    </param>
    <param>
      <key>label4</key>
      <value></value>
    </param>
    <param>
      <key>marker4</key>
      <value>-1</value>
    </param>
    <param>
      <key>style4</key>
      <value>1</value>
    </param>
    <param>
      <key>width4</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha5</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color5</key>
      <value>"cyan"</value>
    </param>
    <param>
      <key>label5</key>
      <value></value>
    </param>
    <param>
      <key>marker5</key>
      <value>-1</value>
    </param>
    <param>
      <key>style5</key>
      <value>1</value>
    </param>
    <param>
      <key>width5</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha6</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color6</key>
      <value>"magenta"</value>
    </param>
    <param>
      <key>label6</key>
      <value></value>
    </param>
    <param>
      <key>marker6</key>
      <value>-1</value>
    </param>
    <param>
      <key>style6</key>
      <value>1</value>
    </param>
    <param>
      <key>width6</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha7</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color7</key>
      <value>"yellow"</value>
    </param>
    <param>
      <key>label7</key>
      <value></value>
    </param>
    <param>
      <key>marker7</key>
      <value>-1</value>
    </param>
    <param>
      <key>style7</key>
      <value>1</value>
    </param>
    <param>
      <key>width7</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha8</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color8</key>
      <value>"dark red"</value>
    </param>
    <param>
      <key>label8</key>
      <value></value>
    </param>
    <param>
      <key>marker8</key>
      <value>-1</value>
    </param>
    <param>
      <key>style8</key>
      <value>1</value>
    </param>
    <param>
      <key>width8</key>
      <value>1</value>
    </param>
    <param>
      <key>alpha9</key>
      <value>1.0</value>
    </param>
    <param>
      <key>color9</key>
      <value>"dark green"</value>
    </param>
    <param>
      <key>label9</key>
      <value></value>
    </param>
    <param>
      <key>marker9</key>
      <value>-1</value>
    </param>
    <param>
      <key>style9</key>
      <value>1</value>
    </param>
    <param>
      <key>width9</key>
      <value>1</value>
    </param>
    <param>
      <key>name</key>
      <value>""</value>
    </param>
    <param>
      <key>nconnections</key>
      <value>1</value>
    </param>
    <param>
      <key>size</key>
      <value>samp_rate * 4</value>
    </param>
    <param>
      <key>srate</key>
      <value>samp_rate</value>
    </param>
    <param>
      <key>stemplot</key>
      <value>False</value>
    </param>
    <param>
      <key>tr_chan</key>
      <value>0</value>
    </param>
    <param>
      <key>tr_delay</key>
      <value>0</value>
    </param>
    <param>
      <key>tr_level</key>
      <value>0.0</value>
    </param>
    <param>
      <key>tr_mode</key>
      <value>qtgui.TRIG_MODE_FREE</value>
    </param>
    <param>
      <key>tr_slope</key>
      <value>qtgui.TRIG_SLOPE_POS</value>
    </param>
    <param>
      <key>tr_tag</key>
      <value>""</value>
    </param>
    <param>
      <key>type</key>
      <value>float</value>
    </param>
    <param>
      <key>update_time</key>
      <value>0.10</value>
    </param>
    <param>
      <key>ylabel</key>
      <value>Amplitude</value>
    </param>
    <param>
      <key>yunit</key>
      <value>""</value>
    </param>
    <param>
      <key>ymax</key>
      <value>1</value>
    </param>
    <param>
      <key>ymin</key>
      <value>-1</value>
    </param>
  </block>
  <connection>
    <source_block_id>analog_sig_source_x_0</source_block_id>
    <sink_block_id>blocks_multiply_xx_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>1</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_complex_to_mag_0</source_block_id>
    <sink_block_id>epy_block_1</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_complex_to_mag_0</source_block_id>
    <sink_block_id>qtgui_time_sink_x_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_moving_average_xx_0</source_block_id>
    <sink_block_id>blocks_complex_to_mag_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>blocks_multiply_xx_0</source_block_id>
    <sink_block_id>blocks_moving_average_xx_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>fx2_iq_udp_source_0</source_block_id>
    <sink_block_id>blocks_multiply_xx_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
  <connection>
    <source_block_id>fx2_iq_udp_source_0</source_block_id>
    <sink_block_id>qtgui_freq_sink_x_0</sink_block_id>
    <source_key>0</source_key>
    <sink_key>0</sink_key>
  </connection>
</flow_graph>
