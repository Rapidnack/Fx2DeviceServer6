C51 COMPILER V7.07   MYADCSA                                                               05/17/2020 16:54:03 PAGE 1   


C51 COMPILER V7.07, COMPILATION OF MODULE MYADCSA
OBJECT MODULE PLACED IN myadcsa.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE myadcsa.c BROWSE DEBUG OBJECTEXTEND TABS(3)

stmt level    source

   1          #pragma NOIV               // Do not generate interrupt vectors
   2          
   3          #include "fx2.h"
   4          #include "fx2regs.h"
   5          #include "syncdly.h"            // SYNCDELAY macro
   6          
   7          extern BOOL GotSUD;             // Received setup data flag
   8          extern BOOL Sleep;
   9          extern BOOL Rwuen;
  10          extern BOOL Selfpwr;
  11          
  12          BYTE Configuration;             // Current configuration
  13          BYTE AlternateSetting;          // Alternate settings
  14          
  15          #define VENDOR_DEVICE_TYPE 0xC0
  16          #define VENDOR_DEVICE_PARAM 0xC1
  17          #define SET_SPI_CS 0xC3
  18          
  19          #define DEVICE_TYPE 0x06
  20          #define DATA_PORT_NO 52006
  21          #define CONTROL_PORT_NO 53006
  22          
  23          #define SPI_CS  PA7
  24          #define SPI_CLK PA3
  25          #define MISO    PA1
  26          #define MOSI    PA0
  27          
  28          //-----------------------------------------------------------------------------
  29          // Task Dispatcher hooks
  30          //   The following hooks are called by the task dispatcher.
  31          //-----------------------------------------------------------------------------
  32          
  33          BYTE SPIXferByte(BYTE b)
  34          {
  35   1         // SPI mode 1
  36   1      
  37   1         BYTE val = 0x00;
  38   1         BYTE mask = 0x80;
  39   1         int i;
  40   1      
  41   1         for (i = 0; i < 8; i++)
  42   1         {
  43   2            if (b & mask) MOSI = 1; else MOSI = 0;
  44   2            SPI_CLK = 1;
  45   2            if (MISO == 1) val |= mask;
  46   2            SPI_CLK = 0;
  47   2            mask >>= 1;
  48   2         }
  49   1         return(val);
  50   1      }
  51          
  52          void TD_Init(void)             // Called once at startup
  53          {
  54   1         CPUCS = ((CPUCS & ~bmCLKSPD) | bmCLKSPD1) ; // 48 MHz CPU clock
  55   1      
C51 COMPILER V7.07   MYADCSA                                                               05/17/2020 16:54:03 PAGE 2   

  56   1         REVCTL = 0x03; // REVCTL.0 and REVCTL.1 set to 1
  57   1         SYNCDELAY;
  58   1      
  59   1      
  60   1         EP1OUTCFG = 0xA0;
  61   1         EP1INCFG = 0xA0;
  62   1      
  63   1         // out endpoints do not come up armed
  64   1         EP1OUTBC = 0x00; // arm EP1OUT by writing any value
  65   1         SYNCDELAY;
  66   1      
  67   1         // bit-bang SPI
  68   1         OEA = 0x89; // 1xxx_1x01
  69   1         SPI_CS = 1;
  70   1         SPI_CLK = 0;
  71   1         MOSI = 0;
  72   1      
  73   1      
  74   1         EP2CFG = 0xE8; // IN, Bulk, 1024, Quad
  75   1      
  76   1         IFCONFIG = 0x43; // slave FIFO interface, external IFCLK
  77   1      
  78   1         FIFORESET = 0x80; // activate NAK-ALL to avoid race conditions
  79   1         SYNCDELAY;
  80   1         FIFORESET = 0x82; // Reset FIFO 2
  81   1         SYNCDELAY;
  82   1         FIFORESET = 0x00; // Release NAKALL
  83   1         SYNCDELAY;
  84   1      
  85   1         EP2FIFOCFG = 0x0C; // EP2 is AUTOOUT=0, AUTOIN=1, ZEROLEN=1, WORDWIDE=0
  86   1         SYNCDELAY;
  87   1         EP2AUTOINLENH = 0x04;
  88   1         SYNCDELAY;
  89   1         EP2AUTOINLENL = 0x00;
  90   1         SYNCDELAY;
  91   1      }
  92          
  93          void TD_Poll(void)              // Called repeatedly while the device is idle
  94          {
  95   1         // bit-bang SPI
  96   1         if (!(EP01STAT & bmBIT1))
  97   1         {
  98   2            BYTE count = EP1OUTBC;
  99   2            BYTE i;
 100   2      
 101   2            for( i = 0; i < count; i++ )
 102   2            {
 103   3               EP1INBUF[i] = SPIXferByte(EP1OUTBUF[i]);
 104   3            }
 105   2      
 106   2            EP1INBC = EP1OUTBC;       // arm EP1IN
 107   2            EP1OUTBC = 0x00;          // re(arm) EP1OUT by writing any value
 108   2         }
 109   1      }
 110          
 111          BOOL TD_Suspend(void)          // Called before the device goes into suspend mode
 112          {
 113   1         return(TRUE);
 114   1      }
 115          
 116          BOOL TD_Resume(void)          // Called after the device resumes
 117          {
C51 COMPILER V7.07   MYADCSA                                                               05/17/2020 16:54:03 PAGE 3   

 118   1         return(TRUE);
 119   1      }
 120          
 121          //-----------------------------------------------------------------------------
 122          // Device Request hooks
 123          //   The following hooks are called by the end point 0 device request parser.
 124          //-----------------------------------------------------------------------------
 125          
 126          BOOL DR_GetDescriptor(void)
 127          {
 128   1         return(TRUE);
 129   1      }
 130          
 131          BOOL DR_SetConfiguration(void)   // Called when a Set Configuration command is received
 132          {
 133   1         Configuration = SETUPDAT[2];
 134   1         return(TRUE);            // Handled by user code
 135   1      }
 136          
 137          BOOL DR_GetConfiguration(void)   // Called when a Get Configuration command is received
 138          {
 139   1         EP0BUF[0] = Configuration;
 140   1         EP0BCH = 0;
 141   1         EP0BCL = 1;
 142   1         return(TRUE);            // Handled by user code
 143   1      }
 144          
 145          BOOL DR_SetInterface(void)       // Called when a Set Interface command is received
 146          {
 147   1         AlternateSetting = SETUPDAT[2];
 148   1         return(TRUE);            // Handled by user code
 149   1      }
 150          
 151          BOOL DR_GetInterface(void)       // Called when a Set Interface command is received
 152          {
 153   1         EP0BUF[0] = AlternateSetting;
 154   1         EP0BCH = 0;
 155   1         EP0BCL = 1;
 156   1         return(TRUE);            // Handled by user code
 157   1      }
 158          
 159          BOOL DR_GetStatus(void)
 160          {
 161   1         return(TRUE);
 162   1      }
 163          
 164          BOOL DR_ClearFeature(void)
 165          {
 166   1         return(TRUE);
 167   1      }
 168          
 169          BOOL DR_SetFeature(void)
 170          {
 171   1         return(TRUE);
 172   1      }
 173          
 174          BOOL DR_VendorCmnd(void)
 175          {
 176   1         switch (SETUPDAT[1])
 177   1         {
 178   2            case VENDOR_DEVICE_TYPE:
 179   2               EP0BUF[0] = DEVICE_TYPE;
C51 COMPILER V7.07   MYADCSA                                                               05/17/2020 16:54:03 PAGE 4   

 180   2               EP0BCH = 0;
 181   2               EP0BCL = 1;
 182   2               break;
 183   2      
 184   2            case VENDOR_DEVICE_PARAM:
 185   2               EP0BUF[0] = DATA_PORT_NO & 0xFF;
 186   2               EP0BUF[1] = (DATA_PORT_NO >> 8) & 0xFF;
 187   2               EP0BUF[2] = CONTROL_PORT_NO & 0xFF;
 188   2               EP0BUF[3] = (CONTROL_PORT_NO >> 8) & 0xFF;
 189   2               EP0BCH = 0;
 190   2               EP0BCL = 4;
 191   2               break;
 192   2      
 193   2            case SET_SPI_CS:
 194   2               SPI_CS = SETUPDAT[2] & 0x01;
 195   2               break;
 196   2      
 197   2            default:
 198   2               return(TRUE);
 199   2         }
 200   1      
 201   1         return(FALSE);
 202   1      }
 203          
 204          //-----------------------------------------------------------------------------
 205          // USB Interrupt Handlers
 206          //   The following functions are called by the USB interrupt jump table.
 207          //-----------------------------------------------------------------------------
 208          
 209          // Setup Data Available Interrupt Handler
 210          void ISR_Sudav(void) interrupt 0
 211          {
 212   1         GotSUD = TRUE;            // Set flag
 213   1         EZUSB_IRQ_CLEAR();
 214   1         USBIRQ = bmSUDAV;         // Clear SUDAV IRQ
 215   1      }
 216          
 217          // Setup Token Interrupt Handler
 218          void ISR_Sutok(void) interrupt 0
 219          {
 220   1         EZUSB_IRQ_CLEAR();
 221   1         USBIRQ = bmSUTOK;         // Clear SUTOK IRQ
 222   1      }
 223          
 224          void ISR_Sof(void) interrupt 0
 225          {
 226   1         EZUSB_IRQ_CLEAR();
 227   1         USBIRQ = bmSOF;            // Clear SOF IRQ
 228   1      }
 229          
 230          void ISR_Ures(void) interrupt 0
 231          {
 232   1         // whenever we get a USB reset, we should revert to full speed mode
 233   1         pConfigDscr = pFullSpeedConfigDscr;
 234   1         ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 235   1         pOtherConfigDscr = pHighSpeedConfigDscr;
 236   1         ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 237   1      
 238   1         EZUSB_IRQ_CLEAR();
 239   1         USBIRQ = bmURES;         // Clear URES IRQ
 240   1      }
 241          
C51 COMPILER V7.07   MYADCSA                                                               05/17/2020 16:54:03 PAGE 5   

 242          void ISR_Susp(void) interrupt 0
 243          {
 244   1         Sleep = TRUE;
 245   1         EZUSB_IRQ_CLEAR();
 246   1         USBIRQ = bmSUSP;
 247   1      }
 248          
 249          void ISR_Highspeed(void) interrupt 0
 250          {
 251   1         if (EZUSB_HIGHSPEED())
 252   1         {
 253   2            pConfigDscr = pHighSpeedConfigDscr;
 254   2            ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 255   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 256   2            ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 257   2         }
 258   1      
 259   1         EZUSB_IRQ_CLEAR();
 260   1         USBIRQ = bmHSGRANT;
 261   1      }
 262          void ISR_Ep0ack(void) interrupt 0
 263          {
 264   1      }
 265          void ISR_Stub(void) interrupt 0
 266          {
 267   1      }
 268          void ISR_Ep0in(void) interrupt 0
 269          {
 270   1      }
 271          void ISR_Ep0out(void) interrupt 0
 272          {
 273   1      }
 274          void ISR_Ep1in(void) interrupt 0
 275          {
 276   1      }
 277          void ISR_Ep1out(void) interrupt 0
 278          {
 279   1      }
 280          void ISR_Ep2inout(void) interrupt 0
 281          {
 282   1      }
 283          void ISR_Ep4inout(void) interrupt 0
 284          {
 285   1      }
 286          void ISR_Ep6inout(void) interrupt 0
 287          {
 288   1      }
 289          void ISR_Ep8inout(void) interrupt 0
 290          {
 291   1      }
 292          void ISR_Ibn(void) interrupt 0
 293          {
 294   1      }
 295          void ISR_Ep0pingnak(void) interrupt 0
 296          {
 297   1      }
 298          void ISR_Ep1pingnak(void) interrupt 0
 299          {
 300   1      }
 301          void ISR_Ep2pingnak(void) interrupt 0
 302          {
 303   1      }
C51 COMPILER V7.07   MYADCSA                                                               05/17/2020 16:54:03 PAGE 6   

 304          void ISR_Ep4pingnak(void) interrupt 0
 305          {
 306   1      }
 307          void ISR_Ep6pingnak(void) interrupt 0
 308          {
 309   1      }
 310          void ISR_Ep8pingnak(void) interrupt 0
 311          {
 312   1      }
 313          void ISR_Errorlimit(void) interrupt 0
 314          {
 315   1      }
 316          void ISR_Ep2piderror(void) interrupt 0
 317          {
 318   1      }
 319          void ISR_Ep4piderror(void) interrupt 0
 320          {
 321   1      }
 322          void ISR_Ep6piderror(void) interrupt 0
 323          {
 324   1      }
 325          void ISR_Ep8piderror(void) interrupt 0
 326          {
 327   1      }
 328          void ISR_Ep2pflag(void) interrupt 0
 329          {
 330   1      }
 331          void ISR_Ep4pflag(void) interrupt 0
 332          {
 333   1      }
 334          void ISR_Ep6pflag(void) interrupt 0
 335          {
 336   1      }
 337          void ISR_Ep8pflag(void) interrupt 0
 338          {
 339   1      }
 340          void ISR_Ep2eflag(void) interrupt 0
 341          {
 342   1      }
 343          void ISR_Ep4eflag(void) interrupt 0
 344          {
 345   1      }
 346          void ISR_Ep6eflag(void) interrupt 0
 347          {
 348   1      }
 349          void ISR_Ep8eflag(void) interrupt 0
 350          {
 351   1      }
 352          void ISR_Ep2fflag(void) interrupt 0
 353          {
 354   1      }
 355          void ISR_Ep4fflag(void) interrupt 0
 356          {
 357   1      }
 358          void ISR_Ep6fflag(void) interrupt 0
 359          {
 360   1      }
 361          void ISR_Ep8fflag(void) interrupt 0
 362          {
 363   1      }
 364          void ISR_GpifComplete(void) interrupt 0
 365          {
C51 COMPILER V7.07   MYADCSA                                                               05/17/2020 16:54:03 PAGE 7   

 366   1      }
 367          void ISR_GpifWaveform(void) interrupt 0
 368          {
 369   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    601    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
